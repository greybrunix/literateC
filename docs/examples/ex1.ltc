\documentclass{article}
\usepackage{stuff}

\begin{document}
    Hi, very interesting document here. \\

\section{Environments and Code sections}
    Here is a bit of code that will confuse everyone
after all it won't be produced at all!
\begin{code}[hide, id=include1, env=0, i=0]
#include <stdio.h> 
\end{code}
    Weird uh? I must be making it up!
    What about this?

\begin{code}[id=structd1, env=0, i=2]
struct Node{
    person x;
    struct Node* y;
};
\end{code}

    It is clear this was produced, however, let us consider
the following as well, what happens if we prefered to have
some code that logically is before this one, but in the
document makes sense to be after? No matter, note how in
the code, we write a `i=number', that denotes the position
of the code block in the compilable C code!

\begin{code}[id=structd0, env=0, i=1]
#define MAX 16
typedef struct{
    int age;
    char name[MAX];
} person;
\end{code}

    One of the principal concepts of Literary Programming
is that the position of one's code should not be dependant
on machine needs but Human needs, of course, a machine needs
a logical sequencing, however we can abstract away from these
concepts in order to create code that is not only readable
by machine but, most importantly by Humans!

\section{Hello World Program}
    For a human the only thing we truly need to see is the
following piece of code;
\begin{code}[id=print, env=1, i=1]
printf("Hello, Cruel World\n");
\end{code}
    Of course, C requires other components, such as the
signature of the main function, which the instruction
is nested inside.

\begin{code}[hide, id=sig, env=1, i=0]
int
main()
{
\end{code}
    And the way the function ends, by returning 0 to the
Operating System, but maybe the reader doesn't care! So
we can choose to ommit it without sacrificing the functioning
of the program!
    
\begin{code}[hide, id=end, env=1, i=2]
return 0;
}
\end{code}
    Both of these components are hidden in this document,
but they both exist, same as the includes in env=0;
the hidden tag serves to prevent code from being typeset
but making sure it remains in the compilable code!

\end{document}

